package com.deloitte.im.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.deloitte.im.model.Policy;
import com.deloitte.im.model.User;
import com.deloitte.im.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
class UserServiceImplTest {
	
	
	@Mock
    private UserRepository userRepository;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private Policy policy;

    @InjectMocks
    private UserServiceImpl userService;

    private User user;
    private User user2;

    private String userId;

    private String policyId;

	@BeforeEach
	void setUp() throws Exception { 
		
		user = new User();
		Policy policy = new Policy();
		user.setId("1");
		user.setFirstName("Vicky");
		user.setLastName("Vignesh");
		user.setEmail("v@g.com"); 
		user.setPhone("1234567890");
		user.setAddress("123 USA St, USA");
		
		List<Policy> policies = new ArrayList<>();
		policy.setId("100");
		policies.add(policy);
		user.setPolicies(policies);
		
		
		Policy policy1 = new Policy();
		List<Policy> policies1 = new ArrayList<>();
		policy1.setId("1001");
		policies1.add(policy1);
		user2 = new User("1", "Sarath", "ss", "s@w.com", "2345678901", "123 Dubai St, Dubai", policies1 );
		userId = "1";
        policyId = "100";
	}

	@Test
	void testCreateUser() throws Exception {
        when(userRepository.save(user)).thenReturn(user);
        ResponseEntity<String> response = userService.createUser(user);
        assertEquals(HttpStatus.OK, response.getStatusCode()); 
        assertEquals("User added with ID : 1", response.getBody());
	}
	

	@Test
	void testGetAllUsers() throws Exception {
		List<User> userList = new ArrayList<>();
        userList.add(user);
        userList.add(user2);
        when(userRepository.findAll()).thenReturn(userList);
        ResponseEntity<List<User>> expectedResponse = userService.getAllUsers();
        assertEquals(HttpStatus.OK, expectedResponse.getStatusCode());
        assertEquals(2, expectedResponse.getBody().size());
	}

	@Test
	void testGetUserById() throws Exception {
		when(userRepository.findById(userId)).thenReturn(Optional.of(user));
        ResponseEntity<User> response = userService.getUserById(userId);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(user, response.getBody());
	}

	@Test
	void testUpdateUser() throws Exception {
		fail("Not yet implemented");
	}

	@Test
	void testDeleteUser() throws Exception {
		fail("Not yet implemented");
	}

	@Test
	void testAddPolicyToUser() throws Exception {
		fail("Not yet implemented");
	}

}
