package com.deloitte.im.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.deloitte.im.exception.UserAlreadyExistException;
import com.deloitte.im.exception.UserNotFoundException;
import com.deloitte.im.exception.UserServiceException;
import com.deloitte.im.model.User;
import com.deloitte.im.service.UserService;


@RestController
@Validated
public class UserController {

	@Autowired
	private UserService userService;

	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	/*
	 * Creating An User
	 */
	@PostMapping("/users")
	public ResponseEntity<String> createUser(@RequestBody User user) {

		try {
			logger.info("Creating user...");
			ResponseEntity<String> response = userService.createUser(user);
			return ResponseEntity.status(response.getStatusCode()).body(response.getBody());
		} catch (UserAlreadyExistException e) {
			logger.error("User not created - Existing User");
			return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
		} catch (UserServiceException e) {
			logger.error("User not created - service error");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}

	}

	/*
	 * Getting All Users
	 */
	@GetMapping("/users")
	public ResponseEntity<List<User>> getAllUsers() {

		try {
			logger.info("Getting all Users");
			ResponseEntity<List<User>> response = userService.getAllUsers();
			logger.info("Got all Users");
			return ResponseEntity.status(response.getStatusCode()).body(response.getBody());
		} catch (UserServiceException e) {
			logger.info("Failed to get all Users");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}

	/*
	 * Getting User By Id
	 */
	@GetMapping("/users/{id}")
	public ResponseEntity<User> getUserById(@PathVariable String id) {

		logger.info("Getting User with Id '{}'", id);
		ResponseEntity<User> response = userService.getUserById(id);
		return ResponseEntity.status(response.getStatusCode()).body(response.getBody());

	}

	/*
	 * Updating An User
	 */
	@PutMapping("/users/{id}")
	public ResponseEntity<String> updateUser(@PathVariable String id, @RequestBody User user) {

		try {
			logger.info("Updating User with Id '{}'", id);
			ResponseEntity<String> response = userService.updateUser(id, user);
			return ResponseEntity.status(response.getStatusCode()).body(response.getBody());
		} catch (UserNotFoundException e) {
			logger.error("User not updated - user not found");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
		} catch (UserServiceException e) {
			logger.error("User not updated - User service error");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}

	}

	/*
	 * Deleting An User
	 */
	@DeleteMapping("/users/{id}")
	public ResponseEntity<String> deleteUser(@PathVariable String id) {

		try {
			logger.info("Deleting User with Id '{}'", id);
			ResponseEntity<Boolean> response = userService.deleteUser(id);
			Boolean result = response.getBody();
			if (result == null || !result) {
				logger.error("User not deleted");
				return ResponseEntity.badRequest().body("User not deleted");
			}
			return ResponseEntity.status(response.getStatusCode()).body("User deleted");
		} catch (UserNotFoundException e) {
			logger.error("User {} not found");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
		} catch (UserServiceException e) {
			logger.error("User not deleted - User server error");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}
	}

	/*
	 * Adding Policies To User
	 */
	@PostMapping("/users/policy")
	public ResponseEntity<?> addPolicyToUser(@RequestParam("userId") String userId,
			@RequestParam("policyId") String policyId) {

		try {
			logger.info("Adding policy " + policyId + " to user " + userId);
			ResponseEntity<?> response = userService.addPolicyToUser(userId, policyId);
			return ResponseEntity.status(response.getStatusCode()).body(response.getBody());
		} catch (UserNotFoundException e) {
			logger.error("Unable to  add policy");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
		} catch (UserServiceException e) {
			logger.error("Unable to add policy {}", policyId);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());

		}

	}

}
