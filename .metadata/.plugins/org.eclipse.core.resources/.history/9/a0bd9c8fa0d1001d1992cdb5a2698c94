package com.deloitte.im.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.deloitte.im.model.Policy;
import com.deloitte.im.model.User;
import com.deloitte.im.service.UserService;

@ExtendWith(MockitoExtension.class)
class UserControllerTest {

	@Mock
	private UserService userService;

	@InjectMocks
	private UserController userController;

	@Mock
	private HttpServletRequest request;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	void testCreateUser() throws Exception {

		User user = new User();
		Policy policy = new Policy();
		policy.setId("456fgh567vgbh");
		user.setFirstName("Vicky");
		user.setLastName("Vignesh");
		user.setEmail("v@g.com");
		user.setPhone("1234567890");
		user.setAddress("123 USA St, USA");
		List<Policy> policies = new ArrayList<>();
		policies.add(policy);
		user.setPolicies(policies);

		when(userService.createUser(any(User.class)))
				.thenReturn(ResponseEntity.status(HttpStatus.CREATED).body("User created successfully"));

		ResponseEntity<String> response = userController.createUser(user);

		assertEquals(HttpStatus.CREATED, response.getStatusCode());
		assertEquals("User created successfully", response.getBody());
		verify(userService, times(1)).createUser(user);
	}

	@Test
	void testGetAllUsers() throws Exception {
		List<User> users = new ArrayList<>();
		User user1 = new User("6nvkn1343", "vicky", "G", "v@g.com", "1234567890", "123 USA St", new ArrayList<>());
		User user2 = new User("6jiojesij", "vignesh", "G", "g@v.com", "0987654321", "456 Dubai St", new ArrayList<>());
		users.add(user1);
		users.add(user2);

		when(userService.getAllUsers()).thenReturn(ResponseEntity.ok(users));

		ResponseEntity<List<User>> response = userController.getAllUsers();

		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertEquals(2, response.getBody().size());
		assertEquals(user1, response.getBody().get(0));
		assertEquals(user2, response.getBody().get(1));
	}

	@Test
	void testGetUserById() throws Exception {

		User mockUser = new User();
		mockUser.setId("6vecdsc123");
		mockUser.setFirstName("vicky");
		mockUser.setLastName("vignesh");
		mockUser.setEmail("v@g.com");
		mockUser.setPhone("1234567890");
		mockUser.setAddress("123 USA St, USA");

		when(userService.getUserById("123")).thenReturn(ResponseEntity.ok(mockUser));

		ResponseEntity<User> response = userController.getUserById("6vecdsc123");

		verify(userService, times(1)).getUserById("6vecdsc123");

		assertEquals(mockUser, response.getBody());
	}

	@Test
	void testUpdateUser() {
		User user = new User();
		Policy policy = new Policy();
		policy.setId("456fgh567vgbh");
		user.setId("6sdfghj123");
		user.setFirstName("Vicky");
		user.setLastName("Vignesh");
		user.setEmail("v@g.com");
		user.setPhone("1234567890");
		user.setAddress("123 USA St, USA");
		List<Policy> policies = new ArrayList<>();
		policies.add(policy);
		user.setPolicies(policies);

		when(userService.updateUser(anyString(), any(User.class)))
				.thenReturn(ResponseEntity.ok("User updated successfully"));

		ResponseEntity<String> response = userController.updateUser("6sdfghj123", user);

		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertEquals("User updated successfully", response.getBody());
		verify(userService, times(1)).updateUser("6sdfghj123", user);

	}

	@Test
	void testDeleteUser() {
		
	   when(userService.deleteUser("6kbvrhoij3455")).thenReturn(ResponseEntity.ok(true));

	   ResponseEntity<String> response = userController.deleteUser("6kbvrhoij3455");

	   verify(userService, times(1)).deleteUser("6kbvrhoij3455");

	   assertEquals(HttpStatus.OK, response.getStatusCode());
	   assertEquals("User deleted", response.getBody());
	}

	@Test
	void testAddPolicyToUser() throws Exception {

		doReturn(ResponseEntity.ok().body("Policy added successfully")).when(userService).addPolicyToUser("1",
				"100");

		when(request.getParameter("userId")).thenReturn("1");
		when(request.getParameter("policyId")).thenReturn("100");

		ResponseEntity<?> response = userController.addPolicyToUser(request.getParameter("userId"),
				request.getParameter("policyId"));
		
		verify(userService).addPolicyToUser("1", "100");
		
		assertNotNull(response);
	    assertEquals(HttpStatus.OK, response.getStatusCode());
	    assertEquals("Policy added successfully", response.getBody());

	}

}
